var documenterSearchIndex = {"docs":
[{"location":"api/high-precision-arithmetic/#High-Precision-Arithmetic-API","page":"API","title":"High Precision Arithmetic API","text":"","category":"section"},{"location":"api/high-precision-arithmetic/","page":"API","title":"API","text":"This section details the HighPrecisionArithmetic module.","category":"page"},{"location":"api/high-precision-arithmetic/#Base.GMP.BigInt-Tuple{HighPrecisionInt}","page":"API","title":"Base.GMP.BigInt","text":"Base.BigInt(hpi::HighPrecisionInt)\n\nConverts a HighPrecisionInt back to a BigInt. This allows for easy verification against Julia's native BigInt type.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.HighPrecisionInt","page":"API","title":"HighPrecisionArithmetic.HighPrecisionInt","text":"HighPrecisionInt\n\nA mutable struct representing a high-precision integer. It stores the number as a vector of UInt64 coefficients in a chosen base (HIGHPRECISIONBASE) and an Int8 sign (1 for positive, -1 for negative, 0 for zero). The coefficients are stored in little-endian order (least significant coefficient first).\n\n\n\n\n\n","category":"type"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.HighPrecisionInt-Tuple{T} where T<:Integer","page":"API","title":"HighPrecisionArithmetic.HighPrecisionInt","text":"HighPrecisionInt(x::T) where {T<:Union{Integer, BigInt}}\n\nConstructs a HighPrecisionInt from a standard Integer or BigInt. Converts the input number into its base-HIGHPRECISIONBASE representation.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.HighPrecisionMatrix","page":"API","title":"HighPrecisionArithmetic.HighPrecisionMatrix","text":"HighPrecisionMatrix\n\nA mutable struct representing a high-precision matrix. It stores a 2D array (Vector of Vectors) of HighPrecisionInt elements.\n\n\n\n\n\n","category":"type"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.HighPrecisionVector","page":"API","title":"HighPrecisionArithmetic.HighPrecisionVector","text":"HighPrecisionVector\n\nA mutable struct representing a high-precision vector. It stores a vector of HighPrecisionInt elements.\n\n\n\n\n\n","category":"type"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{HighPrecisionInt, HighPrecisionInt}","page":"API","title":"Base.:*","text":"Base.:*(a::HighPrecisionInt, b::HighPrecisionInt)\n\nMultiplication operator for HighPrecisionInt. Uses a standard polynomial multiplication approach, accumulating results in BigInt to avoid intermediate overflows, then normalizing.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{HighPrecisionMatrix, HighPrecisionMatrix}","page":"API","title":"Base.:*","text":"Base.:*(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)\n\nMatrix-matrix multiplication. Number of columns in m1 must equal number of rows in m2. The multiplication and summation are performed using BigInt intermediates to avoid repeated HighPrecisionInt object creation during summation for each element.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{HighPrecisionMatrix, HighPrecisionVector}","page":"API","title":"Base.:*","text":"Base.:*(m::HighPrecisionMatrix, v::HighPrecisionVector)\n\nMatrix-vector multiplication. Number of matrix columns must equal vector length. The multiplication and summation are performed using BigInt intermediates to avoid repeated HighPrecisionInt object creation during summation for each element.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{HighPrecisionMatrix, Union{Integer, HighPrecisionInt}}","page":"API","title":"Base.:*","text":"Base.:*(m::HighPrecisionMatrix, scalar::Union{Integer, BigInt, HighPrecisionInt})\n\nScalar-matrix multiplication (matrix * scalar).\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{HighPrecisionVector, Union{Integer, HighPrecisionInt}}","page":"API","title":"Base.:*","text":"Base.:*(v::HighPrecisionVector, scalar::Union{Integer, BigInt, HighPrecisionInt})\n\nScalar-vector multiplication (vector * scalar).\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{Union{Integer, HighPrecisionInt}, HighPrecisionMatrix}","page":"API","title":"Base.:*","text":"Base.:*(scalar::Union{Integer, BigInt, HighPrecisionInt}, m::HighPrecisionMatrix)\n\nScalar-matrix multiplication (scalar * matrix).\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:*-Tuple{Union{Integer, HighPrecisionInt}, HighPrecisionVector}","page":"API","title":"Base.:*","text":"Base.:*(scalar::Union{Integer, BigInt, HighPrecisionInt}, v::HighPrecisionVector)\n\nScalar-vector multiplication (scalar * vector).\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:+-Tuple{HighPrecisionInt, HighPrecisionInt}","page":"API","title":"Base.:+","text":"Base.:+(a::HighPrecisionInt, b::HighPrecisionInt)\n\nAddition operator for HighPrecisionInt. Handles various sign combinations (same sign, different signs) by calling abs_subtract when magnitudes need to be subtracted.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:+-Tuple{HighPrecisionMatrix, HighPrecisionMatrix}","page":"API","title":"Base.:+","text":"Base.:+(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)\n\nMatrix addition. Both matrices must have the same dimensions.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:+-Tuple{HighPrecisionVector, HighPrecisionVector}","page":"API","title":"Base.:+","text":"Base.:+(v1::HighPrecisionVector, v2::HighPrecisionVector)\n\nVector addition. Both vectors must have the same length.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:--Tuple{HighPrecisionInt, HighPrecisionInt}","page":"API","title":"Base.:-","text":"Base.:-(a::HighPrecisionInt, b::HighPrecisionInt)\n\nSubtraction operator for HighPrecisionInt. Implemented in terms of addition: a - b is a + (-b).\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:--Tuple{HighPrecisionInt}","page":"API","title":"Base.:-","text":"Base.:-(hpi::HighPrecisionInt)\n\nUnary negation operator for HighPrecisionInt. Changes the sign of the number, handling zero as a special case.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:--Tuple{HighPrecisionMatrix, HighPrecisionMatrix}","page":"API","title":"Base.:-","text":"Base.:-(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)\n\nMatrix subtraction. Both matrices must have the same dimensions.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.:--Tuple{HighPrecisionVector, HighPrecisionVector}","page":"API","title":"Base.:-","text":"Base.:-(v1::HighPrecisionVector, v2::HighPrecisionVector)\n\nVector subtraction. Both vectors must have the same length.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.abs-Tuple{HighPrecisionInt}","page":"API","title":"Base.abs","text":"Base.abs(hpi::HighPrecisionInt)\n\nReturns the absolute value of a HighPrecisionInt. Creates a new HighPrecisionInt with a positive sign (1) but the same coefficients.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.isequal-Tuple{HighPrecisionInt, HighPrecisionInt}","page":"API","title":"Base.isequal","text":"Base.isequal(a::HighPrecisionInt, b::HighPrecisionInt)\n\nChecks for equality between two HighPrecisionInt instances. Returns true if both sign and coefficients are identical.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.isless-Tuple{HighPrecisionInt, HighPrecisionInt}","page":"API","title":"Base.isless","text":"Base.isless(a::HighPrecisionInt, b::HighPrecisionInt)\n\nCompares two HighPrecisionInt instances for less than (a < b). Handles signs and then compares magnitudes.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#Base.show-Tuple{IO, HighPrecisionInt}","page":"API","title":"Base.show","text":"Base.show(io::IO, hpi::HighPrecisionInt)\n\nDefines how a HighPrecisionInt object is displayed when printed. Converts it to a BigInt for a user-friendly decimal representation.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.abs_subtract-Tuple{Vector{UInt64}, Vector{UInt64}}","page":"API","title":"HighPrecisionArithmetic.abs_subtract","text":"abs_subtract(a_coeffs::Vector{UInt64}, b_coeffs::Vector{UInt64})\n\nPerforms absolute subtraction of two positive numbers represented by coefficient vectors. Returns a tuple: (resultcoeffs, isnegativediff). `isnegative_diff` is true if |b| > |a| (i.e., the result would be negative if a - b was computed). This helper is used for addition/subtraction where signs differ.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#HighPrecisionArithmetic.normalize!-Tuple{HighPrecisionInt}","page":"API","title":"HighPrecisionArithmetic.normalize!","text":"normalize!(hpi::HighPrecisionInt)\n\nNormalizes a HighPrecisionInt in place. This function performs two main tasks:\n\nHandles carries/borrows across coefficients.\nRemoves leading zeros from the coefficients vector.\nSets the sign to 0 if the number becomes zero.\n\n\n\n\n\n","category":"method"},{"location":"api/high-precision-arithmetic/#LinearAlgebra.dot-Tuple{HighPrecisionVector, HighPrecisionVector}","page":"API","title":"LinearAlgebra.dot","text":"LinearAlgebra.dot(v1::HighPrecisionVector, v2::HighPrecisionVector)\n\nCalculates the dot product of two vectors. Both vectors must have the same length. This function extends LinearAlgebra.dot. The multiplication and summation are performed using BigInt intermediates to avoid repeated HighPrecisionInt object creation during summation.\n\n\n\n\n\n","category":"method"},{"location":"HighPrecisionNumber/#High-Precision-Number","page":"High Precision Number","title":"🧮 High Precision Number","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"This module provides a custom HighPrecisionInt type for performing arithmetic operations on integers that exceed the standard Int64 or UInt128 limits in Julia. It achieves arbitrary precision by representing numbers as a vector of UInt64 coefficients in a large base 2^32, similar to how BigInt works internally.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Type-Definitions","page":"High Precision Number","title":"🔧 Type Definitions","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"The core of the module is the HighPrecisionInt struct:","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"mutable struct HighPrecisionInt\n    coeffs::Vector{UInt64}  # Coefficients in little-endian order (least significant first)\n    sign::Int8              # 1 for positive, -1 for negative, 0 for zero\nend","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"📌 The HIGH_PRECISION_BASE is defined as UInt64(2)^32. Each UInt64 coefficient effectively stores 32 bits of the high-precision number, leveraging the remaining 32 bits for intermediate arithmetic operations and overflow prevention.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Key-Functions-and-Operators","page":"High Precision Number","title":"➕ Key Functions and Operators","text":"","category":"section"},{"location":"HighPrecisionNumber/#Constructors","page":"High Precision Number","title":"🏗️ Constructors","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"HighPrecisionInt(coeffs::Vector{UInt64}, sign::Int8=1)   → Creates a HighPrecisionInt from coefficients and optional sign. Automatically calls normalize!.\nHighPrecisionInt(x::T) where {T<:Union{Integer, BigInt}}   → Converts a standard Julia Integer or BigInt into a HighPrecisionInt.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Internal-Utilities","page":"High Precision Number","title":"🧰 Internal Utilities","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"normalize!(hpi::HighPrecisionInt)   → Cleans up the representation by:\nHandling carries/borrows\nRemoving leading zeros\nAdjusting sign for zero","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Conversions","page":"High Precision Number","title":"🔁 Conversions","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"Base.BigInt(hpi::HighPrecisionInt)   → Converts to Julia's native BigInt type.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Unary-Operations","page":"High Precision Number","title":"➕ Unary Operations","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"Base.abs(hpi::HighPrecisionInt)   → Returns absolute value.\nBase.:-(hpi::HighPrecisionInt)   → Unary negation; flips the sign.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Comparison-Operators","page":"High Precision Number","title":"⚖️ Comparison Operators","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"Base.isequal(a::HighPrecisionInt, b::HighPrecisionInt)   → Equality check. Aliased as ==.\nBase.isless(a::HighPrecisionInt, b::HighPrecisionInt)   → Less-than check. Aliased as <.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Arithmetic-Operators","page":"High Precision Number","title":"🧮 Arithmetic Operators","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"Base.:+(a::HighPrecisionInt, b::HighPrecisionInt)   → Addition with sign handling and abs_subtract fallback.\nBase.:-(a::HighPrecisionInt, b::HighPrecisionInt)   → Subtraction as a + (-b).\nBase.:*(a::HighPrecisionInt, b::HighPrecisionInt)   → Polynomial-style multiplication using BigInt for intermediate results.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Display","page":"High Precision Number","title":"🖨️ Display","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"Base.show(io::IO, hpi::HighPrecisionInt)   → Displays as equivalent decimal when printed.","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/#Usage-Examples","page":"High Precision Number","title":"🧪 Usage Examples","text":"","category":"section"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"# Load the module\ninclude(\"HighPrecisionNumber.jl\")\nusing .HighPrecisionNumber\n\nprintln(\"--- HighPrecisionInt Usage Examples ---\")\n\n# 1️⃣ Creation\nval_pos = HighPrecisionInt(123)\nprintln(\"HighPrecisionInt(123)       => $val_pos\")\n\nval_neg = HighPrecisionInt(-4567)\nprintln(\"HighPrecisionInt(-4567)     => $val_neg\")\n\nval_zero = HighPrecisionInt(0)\nprintln(\"HighPrecisionInt(0)         => $val_zero\")\n\nval_large_pos = HighPrecisionInt(typemax(UInt128))\nprintln(\"HighPrecisionInt(typemax(UInt128)) => $val_large_pos\")\nprintln(\"  (Equivalent BigInt: $(BigInt(val_large_pos)))\")\n\nval_large_neg = HighPrecisionInt(-BigInt(2)^150 - 1)\nprintln(\"HighPrecisionInt(-2^150 - 1) => $val_large_neg\")\nprintln(\"  (Equivalent BigInt: $(BigInt(val_large_neg)))\")\n\n# 2️⃣ Addition\na_pos = HighPrecisionInt(1000)\nb_pos = HighPrecisionInt(2000)\nprintln(\"\\nAddition:\")\nprintln(\"$a_pos + $b_pos => $(a_pos + b_pos)\")\nprintln(\"Verification: $(BigInt(a_pos + b_pos) == 3000)\")\n\na_neg = HighPrecisionInt(-1000)\nb_neg = HighPrecisionInt(-2000)\nprintln(\"$a_neg + $b_neg => $(a_neg + b_neg)\")\nprintln(\"Verification: $(BigInt(a_neg + b_neg) == -3000)\")\n\n# ➕ Mixed Sign Addition\na_pos_large = HighPrecisionInt(parse(BigInt, \"98765432109876543210987654321098765\"))\nb_neg_small = HighPrecisionInt(-parse(BigInt, \"12345\"))\nsum_diff_signs_pos = a_pos_large + b_neg_small\nexpected_sum_diff_signs_pos = parse(BigInt, \"98765432109876543210987654321098765\") - parse(BigInt, \"12345\")\nprintln(\"$a_pos_large + $b_neg_small => $sum_diff_signs_pos\")\nprintln(\"Verification: $(BigInt(sum_diff_signs_pos) == expected_sum_diff_signs_pos)\")\n\na_pos_small = HighPrecisionInt(parse(BigInt, \"12345\"))\nb_neg_large = HighPrecisionInt(-parse(BigInt, \"98765432109876543210987654321098765\"))\nsum_diff_signs_neg = a_pos_small + b_neg_large\nexpected_sum_diff_signs_neg = parse(BigInt, \"12345\") - parse(BigInt, \"98765432109876543210987654321098765\")\nprintln(\"$a_pos_small + $b_neg_large => $sum_diff_signs_neg\")\nprintln(\"Verification: $(BigInt(sum_diff_signs_neg) == expected_sum_diff_signs_neg)\")\n\n# 3️⃣ Subtraction\nc = HighPrecisionInt(5000)\nd = HighPrecisionInt(2000)\nprintln(\"\\nSubtraction:\")\nprintln(\"$c - $d => $(c - d)\")\nprintln(\"Verification: $(BigInt(c - d) == 3000)\")\n\nprintln(\"$d - $c => $(d - c)\")\nprintln(\"Verification: $(BigInt(d - c) == -3000)\")\n\n# 4️⃣ Multiplication\nx_pos = HighPrecisionInt(15)\ny_pos = HighPrecisionInt(8)\nprintln(\"\\nMultiplication:\")\nprintln(\"$x_pos * $y_pos => $(x_pos * y_pos)\")\nprintln(\"Verification: $(BigInt(x_pos * y_pos) == 120)\")\n\nx_neg = HighPrecisionInt(-15)\ny_pos = HighPrecisionInt(8)\nprintln(\"$x_neg * $y_pos => $(x_neg * y_pos)\")\nprintln(\"Verification: $(BigInt(x_neg * y_pos) == -120)\")\n\nlarge_val_1_pos = HighPrecisionInt(parse(BigInt, \"12345678901234567890123\"))\nlarge_val_2_neg = HighPrecisionInt(-parse(BigInt, \"98765432109876543210987\"))\nproduct_large_signed = large_val_1_pos * large_val_2_neg\nexpected_product_large_signed = parse(BigInt, \"12345678901234567890123\") * -parse(BigInt, \"98765432109876543210987\")\nprintln(\"\\n$large_val_1_pos * $large_val_2_neg => $product_large_signed\")\nprintln(\"Verification: $(BigInt(product_large_signed) == expected_product_large_signed)\")","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"","category":"page"},{"location":"HighPrecisionNumber/","page":"High Precision Number","title":"High Precision Number","text":"This documentation provides a comprehensive overview of the HighPrecisionNumber module, its components, and how to use its various functions and operators effectively.","category":"page"},{"location":"HighPrecisionLinearAlgebra/#High-Precision-Linear-Algebra","page":"High Precision Linear Algebra","title":"🧮 High Precision Linear Algebra","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"This module extends the functionality of HighPrecisionNumber by providing basic linear algebra operations for vectors and matrices using HighPrecisionInt elements. It enables computations with arbitrary-precision numbers in vector and matrix contexts.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Dependencies","page":"High Precision Linear Algebra","title":"📦 Dependencies","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"HighPrecisionNumber: Provides the HighPrecisionInt type.\nLinearAlgebra (Base): Required for defining and overloading operations like dot.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Type-Definitions","page":"High Precision Linear Algebra","title":"🔧 Type Definitions","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/#HighPrecisionVector","page":"High Precision Linear Algebra","title":"📐 HighPrecisionVector","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"Represents a high-precision vector.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"mutable struct HighPrecisionVector\n    elements::Vector{HighPrecisionInt}\nend","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Constructors:","page":"High Precision Linear Algebra","title":"🛠️ Constructors:","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"HighPrecisionVector(elements::Vector{HighPrecisionInt})   From high-precision elements.\nHighPrecisionVector(elements::Vector{T}) where {T<:Union{Integer, BigInt}}   Automatically converts standard integers to HighPrecisionInt.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#HighPrecisionMatrix","page":"High Precision Linear Algebra","title":"🧱 HighPrecisionMatrix","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"Represents a high-precision matrix.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"mutable struct HighPrecisionMatrix\n    elements::Vector{Vector{HighPrecisionInt}}\n    rows::Int\n    cols::Int\nend","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Constructors:-2","page":"High Precision Linear Algebra","title":"🛠️ Constructors:","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"HighPrecisionMatrix(elements::Vector{Vector{HighPrecisionInt}})   Validates consistent column lengths.\nHighPrecisionMatrix(elements::Vector{Vector{T}}) where {T<:Union{Integer, BigInt}}   Converts integers to HighPrecisionInt.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Operator-Overloads-and-Functions","page":"High Precision Linear Algebra","title":"➕ Operator Overloads and Functions","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/#Vector-Operations","page":"High Precision Linear Algebra","title":"📏 Vector Operations","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"Base.:+(v1::HighPrecisionVector, v2::HighPrecisionVector)\nBase.:-(v1::HighPrecisionVector, v2::HighPrecisionVector)\nBase.:*(scalar::Union{Integer, BigInt, HighPrecisionInt}, v::HighPrecisionVector)\nBase.:*(v::HighPrecisionVector, scalar::Union{Integer, BigInt, HighPrecisionInt})\nLinearAlgebra.dot(v1::HighPrecisionVector, v2::HighPrecisionVector)","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"ℹ️ dot uses BigInt internally for accumulation and returns a HighPrecisionInt.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Matrix-Operations","page":"High Precision Linear Algebra","title":"🧮 Matrix Operations","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"Base.:+(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)\nBase.:-(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)\nBase.:*(scalar, m::HighPrecisionMatrix)\nBase.:*(m::HighPrecisionMatrix, scalar)\nBase.:*(m::HighPrecisionMatrix, v::HighPrecisionVector)\nBase.:*(m1::HighPrecisionMatrix, m2::HighPrecisionMatrix)","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"ℹ️ Internally uses BigInt for intermediate results to ensure precision.","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Display-Methods","page":"High Precision Linear Algebra","title":"🖨️ Display Methods","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"Base.show(io::IO, v::HighPrecisionVector)\nBase.show(io::IO, m::HighPrecisionMatrix)","category":"page"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"","category":"page"},{"location":"HighPrecisionLinearAlgebra/#Usage-Examples","page":"High Precision Linear Algebra","title":"🧪 Usage Examples","text":"","category":"section"},{"location":"HighPrecisionLinearAlgebra/","page":"High Precision Linear Algebra","title":"High Precision Linear Algebra","text":"# 📥 Include required modules\ninclude(\"HighPrecisionNumber.jl\")\ninclude(\"HighPrecisionLinearAlgebra.jl\")\nusing .HighPrecisionLinearAlgebra\nusing .HighPrecisionNumber\n\nprintln(\"--- HighPrecisionLinearAlgebra Usage Examples ---\")\n\n# 1️⃣ HighPrecisionVector Creation\nvec1 = HighPrecisionVector([1, -2])\nvec2 = HighPrecisionVector([1000, -500, 200])\nlarge_vec = HighPrecisionVector([BigInt(2)^70, -BigInt(2)^75, BigInt(2)^80])\n\n# 2️⃣ Vector Addition & Subtraction\nvec1_compat = HighPrecisionVector([1, 2, 3])\nvec2_compat = HighPrecisionVector([10, 20, 30])\nv_sum = vec1_compat + vec2_compat\nv_diff = vec1_compat - vec2_compat\n\n# 3️⃣ Scalar Multiplication\nscalar_val = HighPrecisionInt(5)\nv_scaled = scalar_val * HighPrecisionVector([1, -2, 3])\n\n# 4️⃣ Dot Product\ndot_vec_a = HighPrecisionVector([1, 2, 3])\ndot_vec_b = HighPrecisionVector([4, 5, 6])\nv_dot = LinearAlgebra.dot(dot_vec_a, dot_vec_b)\n\n# 5️⃣ Matrix Creation\nmat1 = HighPrecisionMatrix([[1, 2], [3, 4]])\nmat2 = HighPrecisionMatrix([[5, 6], [7, 8]])\nlarge_mat = HighPrecisionMatrix([\n    [BigInt(2)^60, -BigInt(2)^62],\n    [BigInt(2)^65, BigInt(2)^67]\n])\n\n# 6️⃣ Matrix Addition & Subtraction\nm_sum = mat1 + mat2\nm_diff = mat1 - mat2\n\n# 7️⃣ Matrix Scalar Multiplication\nm_scaled = HighPrecisionInt(3) * mat1\n\n# 8️⃣ Matrix-Vector Multiplication\nm_vec_prod = mat1 * vec1\n\n# 9️⃣ Matrix-Matrix Multiplication\nm_mat_prod = mat1 * mat2\n\n# 🖨️ Display Results\nprintln(\"vec1 = $vec1\")\nprintln(\"vec2 = $vec2\")\nprintln(\"large_vec = $large_vec\")\nprintln(\"v_sum = $v_sum\")\nprintln(\"v_diff = $v_diff\")\nprintln(\"v_scaled = $v_scaled\")\nprintln(\"v_dot = $v_dot\")\nprintln(\"mat1 = \\n$mat1\")\nprintln(\"mat2 = \\n$mat2\")\nprintln(\"large_mat = \\n$large_mat\")\nprintln(\"m_sum = \\n$m_sum\")\nprintln(\"m_diff = \\n$m_diff\")\nprintln(\"m_scaled = \\n$m_scaled\")\nprintln(\"m_vec_prod = $m_vec_prod\")\nprintln(\"m_mat_prod = \\n$m_mat_prod\")\n\nprintln(\"\\n--- ✅ End of Examples ---\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"@raw html <meta name=\"google-site-verification\" content=\"AJHgoxZpANFw1AYXyK6_6hY4iQujUeTBdFqx9zFydqU\">","category":"page"},{"location":"#High-Precision-Arithmetic-Library","page":"Home","title":"High Precision Arithmetic Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for the High Precision Arithmetic Library.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This library provides arbitrary-precision integer arithmetic and linear algebra operations built on top of it.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"High Precision Number\nHigh Precision Linear Algebra","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"High Precision Arithmetic API","category":"page"}]
}
